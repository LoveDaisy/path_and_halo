function test_compute_weight()
test_cases = {@suite1};
num = length(test_cases);

fprintf('Start testing for compute_weight...\n');
for i = 1:num
    fprintf('Testing suite %d/%d...\n', i, num);
    test_cases{i}();
    fprintf('suite %d/%d passed!\n', i, num);
end
end

% ================================================================================
function suite1()
crystal = opt.make_prism_crystal(1);
trace.fid = [3; 5];
sun_ll = [180, 10];
ray_in_ll = [sun_ll(1) + 180, -sun_ll(2)];
ray_out_ll = [-5, 13.8];
ray_out_xyz = geo.ll2xyz(ray_out_ll);

config_cache_file = 'test_config_1_35_180+10_3.mat';
if exist(config_cache_file, 'file')
    load(config_cache_file);
else
    config = opt.init_config(crystal, trace, sun_ll, 3);
    save(config_cache_file, 'config');
end

fdf = @(rot) opt.crystal_system(rot, ray_in_ll, crystal, trace);

% Find seed rotation
cand_rot = opt.find_cand_rot(config, ray_out_ll, 'quat');
init_rot = ode.find_solution(fdf, cand_rot(1, :), [ray_out_xyz, 1], 'eps', 1e-8);

% Find contour
[rot_contour, contour_status] = ode.find_contour(fdf, init_rot, 'h', 0.05);
assert(contour_status.closed && contour_status.completed);

rot_llr = geo.quat2llr(rot_contour);
w0 = 19.3139298726968;
cmp0 = [0, 0.155444145935710, 2.42406840554768e-05, 38157.5615836965, 0.186902489694091, 0.899153417947328;
    5.79645071271513, 0.158168296451584, 2.42406840554768e-05, 32349.7796555605, 0.199068006954559, 1.01321537338526;
    10.2977046214794, 0.151301528546457, 2.42406840554768e-05, 27911.8637616088, 0.205524291792715, 1.08804397248263;
    16.1859283548982, 0.147353387227318, 2.42406840554768e-05, 23818.2712813046, 0.218335907609640, 1.16890670304099;
    22.0708611829296, 0.149017987091248, 2.42406840554768e-05, 21414.2815695853, 0.234079336107555, 1.22638614579433;
    27.9563820983262, 0.152856629556822, 2.42406840554768e-05, 20110.4944346508, 0.248000903468656, 1.26433859957009;
    35.3110750005856, 0.171823812109492, 2.42406840554768e-05, 19747.3861117242, 0.279567549223153, 1.28393223278903;
    41.2002343264668, 0.181595595646937, 2.42406840554768e-05, 19750.9847421185, 0.293307162704320, 1.29315033792517;
    48.5581275007906, 0.171279911280661, 2.42406840554768e-05, 20976.6908549410, 0.263628881002563, 1.27770794145828;
    54.4410557842614, 0.167588391209524, 2.42406840554768e-05, 22673.7512601688, 0.243415427990583, 1.25264376736121;
    60.3287124495266, 0.171492515432956, 2.42406840554768e-05, 25985.1413490816, 0.226555511384849, 1.20171251533576;
    65.2617385192009, 0.176990696868120, 2.42406840554768e-05, 30216.4714843422, 0.211935674482873, 1.14013887336550;
    70.5117554208258, 0.180688244531960, 2.42406840554768e-05, 35599.1632879309, 0.200665039388792, 1.04345451395900;
    75.0402731366295, 0.165772413912621, 2.42406840554768e-05, 36688.8050357893, 0.196479153358735, 0.948674758528708;
    79.4549602860519, 0.130487406544608, 2.42406840554768e-05, 34621.8249553900, 0.179157815909204, 0.867836701268843;
    85.3367825727022, 0.0993918471389992, 2.42406840554768e-05, 31333.8995616090, 0.165137571819020, 0.792401974764851;
    91.2261965255439, 0.0831227139508361, 2.42406840554768e-05, 29038.8902657465, 0.159484967971357, 0.740414767632003;
    97.1112759818408, 0.0762199911075817, 2.42406840554768e-05, 27697.8258161470, 0.160592439163631, 0.706892295686480;
    102.996483034181, 0.0760761821056524, 2.42406840554768e-05, 27126.8967253230, 0.168301982947252, 0.687407856247642;
    110.351993480355, 0.0824782239701307, 2.42406840554768e-05, 27119.3079472768, 0.185725281452968, 0.675530250397539;
    116.242153162782, 0.0841604602385878, 2.42406840554768e-05, 27614.9234056502, 0.186540462674823, 0.673978958341315;
    123.597419759063, 0.0815647388376885, 2.42406840554768e-05, 28928.2763655793, 0.170470665459245, 0.682315700013507;
    129.481551323206, 0.0845210192489151, 2.42406840554768e-05, 30815.1810954641, 0.161518910707858, 0.700538088607702;
    135.367977665971, 0.0958529723901855, 2.42406840554768e-05, 33826.3501356893, 0.158893166860762, 0.735699316933757;
    139.782119786853, 0.112286211911027, 2.42406840554768e-05, 36661.9396701654, 0.162383029623426, 0.778082201919096;
    144.196040581220, 0.136731238861165, 2.42406840554768e-05, 38819.5773458288, 0.172892911856410, 0.840417111247848];

axis_pdf = generate_axis_pdf([0, 0, 0]);
[w, cmp] = opt.compute_contour_weight(rot_llr, axis_pdf, config);

assert(abs(w - w0) < 1e-8);
assert(norm(cmp(1:5:end, :) - cmp0) < 1e-8);
end

% ================================================================================
function axis_pdf = generate_axis_pdf(zenith_dist)
% INPUT
%   zenith_dist:        [type, mean, sigma], type: 0 - uniform, 1 - gaussian

if zenith_dist(1) == 1
    zenith_dist = zenith_dist(2:3);
    tmp_x = linspace(-90, 90, 50000);
    tmp_pdf = exp(- (90 - tmp_x - zenith_dist(1)).^2/2 / zenith_dist(2)^2) / zenith_dist(2);
    zen_total = (sum(tmp_pdf) * (tmp_x(2) - tmp_x(1)));
    axis_pdf = @(llr) (exp(- (90 - asind(sind(llr(:, 2))) - zenith_dist(1)).^2/2 / zenith_dist(2)^2) / ...
        zenith_dist(2) / zen_total) * (1/360) * (1/360);
elseif zenith_dist(1) == 0
    axis_pdf = @(llr) ones(size(llr, 1), 1) / (180 * 180 * 4 / pi);
else
    error('Distribution type error!');
end
end
