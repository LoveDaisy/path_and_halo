function test_compute_weight()
test_cases = {@suite1};
num = length(test_cases);

fprintf('Start testing for compute_weight...\n');
for i = 1:num
    fprintf('Testing suite %d/%d...\n', i, num);
    test_cases{i}();
    fprintf('suite %d/%d passed!\n', i, num);
end
end

% ================================================================================
function suite1()
crystal = opt.make_prism_crystal(1);
trace.fid = [3; 5];
sun_ll = [180, 10];
ray_in_ll = [sun_ll(1) + 180, -sun_ll(2)];
ray_out_ll = [-5, 13.8];

config_cache_file = 'test_config_1_35_180+10_3.mat';
if exist(config_cache_file, 'file')
    load(config_cache_file);
else
    config = opt.init_config(crystal, trace, sun_ll, 3);
    save(config_cache_file, 'config');
end

fdf = @(rot) opt.crystal_system(rot, ray_in_ll, crystal, trace);

% Find seed rotation
cand_rot = opt.find_cand_rot(config, ray_out_ll, 'quat');
init_rot = ode.find_solution(fdf, cand_rot(1, :), [ray_out_ll, 1], 'eps', 1e-8);

% Find contour
[rot_contour, contour_status] = ode.find_contour(fdf, init_rot, 'h', 0.05);
assert(contour_status.closed && contour_status.completed);

rot_llr = geo.quat2llr(rot_contour);
w0 = 0.00584322444069754;
cmp0 = [0, 3.42276097278189e-05, 2.42406840554768e-05, 8.40200548681922, 0.186902454035421, 0.899153285889582;
    5.38757926364751, 9.94836349686906e-07, 2.42406840554768e-05, 0.305578856097369, 0.166484832344015, 0.806693950651438;
    10.2932168390482, 1.39533693848093e-05, 2.42406840554768e-05, 4.77709193608836, 0.160205805213223, 0.752129064884193;
    16.1730530052101, 2.12972362236234e-05, 2.42406840554768e-05, 7.61990456422257, 0.161715310518915, 0.712980588208198;
    23.5296857482992, 2.54587222928427e-05, 2.42406840554768e-05, 9.01737937623972, 0.170521376461546, 0.683018648465642;
    29.4185598705471, 2.76021017245803e-05, 2.42406840554768e-05, 9.51359616943211, 0.177080884223915, 0.675897572049612;
    36.4648561133044, 2.98470810101952e-05, 2.42406840554768e-05, 9.91616357475723, 0.184793076579854, 0.671935544039061;
    42.5730794166595, 2.88156943070390e-05, 2.42406840554768e-05, 10.2859482351870, 0.169777935613795, 0.680704519649992;
    48.5356499386647, 2.94935339865443e-05, 2.42406840554768e-05, 10.7890786575045, 0.161467684373260, 0.698412440010480;
    54.4184864751053, 3.21521753354261e-05, 2.42406840554768e-05, 11.4878206472308, 0.158711585293505, 0.727476911246956;
    60.3026000018353, 3.75355631649403e-05, 2.42406840554768e-05, 12.3622160596761, 0.162024645791401, 0.773073265409271;
    64.7140935624909, 4.34639912650094e-05, 2.42406840554768e-05, 12.9451968586474, 0.168880747051434, 0.820154992659938;
    70.5973796046417, 4.99857077356572e-05, 2.42406840554768e-05, 11.8082276866471, 0.191105728638027, 0.913781897026592;
    75.0110411626996, 3.19221336086859e-05, 2.42406840554768e-05, 6.59319346424643, 0.199096817403242, 1.00319856570929;
    80.8914902849777, 1.20632939966904e-05, 2.42406840554768e-05, 2.13093761719058, 0.209024818171957, 1.11725536998472;
    86.7762773169044, 3.05894954303102e-05, 2.42406840554768e-05, 4.63354421899161, 0.226720708299374, 1.20122106802789;
    92.4818520715323, 4.31785443152854e-05, 2.42406840554768e-05, 5.89759954975651, 0.241243215875548, 1.25196658036682;
    98.5372337693765, 5.21897274599450e-05, 2.42406840554768e-05, 6.36392003353772, 0.265506187342186, 1.27420937952127;
    104.426283989369, 6.15695911007908e-05, 2.42406840554768e-05, 6.84905286007053, 0.286540035751873, 1.29421243832191;
    111.781064841649, 6.22878819488981e-05, 2.42406840554768e-05, 7.43759922072781, 0.268855257068444, 1.28501260203523;
    117.662740332629, 6.26224237949435e-05, 2.42406840554768e-05, 8.00255787946950, 0.253825049302369, 1.27180842803730;
    123.545919945408, 6.29453937264288e-05, 2.42406840554768e-05, 8.83384305082306, 0.237270051389488, 1.23887212122625;
    129.429633365038, 6.43388832853469e-05, 2.42406840554768e-05, 9.98917031966158, 0.223563569766584, 1.18849728455005;
    135.312083662877, 6.49342404083192e-05, 2.42406840554768e-05, 11.4908618394636, 0.208555222224404, 1.11777713472622;
    141.009236526193, 6.22536226871229e-05, 2.42406840554768e-05, 12.5589925643903, 0.199574063287081, 1.02461534351051;
    145.607088028045, 4.48936829209840e-05, 2.42406840554768e-05, 10.2387755259342, 0.193544559323848, 0.934569007152742];

axis_pdf = generate_axis_pdf([0, 0, 0]);
[w, cmp] = opt.compute_contour_weight(rot_llr, axis_pdf, config);

assert(abs(w - w0) < 1e-8);
assert(norm(cmp(1:5:end, :) - cmp0) < 1e-8);
end

% ================================================================================
function axis_pdf = generate_axis_pdf(zenith_dist)
% INPUT
%   zenith_dist:        [type, mean, sigma], type: 0 - uniform, 1 - gaussian

if zenith_dist(1) == 1
    zenith_dist = zenith_dist(2:3);
    tmp_x = linspace(-90, 90, 50000);
    tmp_pdf = exp(- (90 - tmp_x - zenith_dist(1)).^2/2 / zenith_dist(2)^2) / zenith_dist(2);
    zen_total = (sum(tmp_pdf) * (tmp_x(2) - tmp_x(1)));
    axis_pdf = @(llr) (exp(- (90 - asind(sind(llr(:, 2))) - zenith_dist(1)).^2/2 / zenith_dist(2)^2) / ...
        zenith_dist(2) / zen_total) * (1/360) * (1/360);
elseif zenith_dist(1) == 0
    axis_pdf = @(llr) ones(size(llr, 1), 1) / (180 * 180 * 4 / pi);
else
    error('Distribution type error!');
end
end
