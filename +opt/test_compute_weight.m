function test_compute_weight()
test_cases = {@suite1};
num = length(test_cases);

fprintf('Start testing for compute_weight...\n');
for i = 1:num
    fprintf('Testing suite %d/%d...\n', i, num);
    test_cases{i}();
    fprintf('suite %d/%d passed!\n', i, num);
end
end

% ================================================================================
function suite1()
crystal = opt.make_prism_crystal(1);
trace.fid = [3; 5];
sun_ll = [180, 10];
ray_in_ll = [sun_ll(1) + 180, -sun_ll(2)];
ray_out_ll = [-5, 13.8];

config_cache_file = 'test_config_1_35_180+10_3.mat';
if exist(config_cache_file, 'file')
    load(config_cache_file);
else
    config = opt.init_config(crystal, trace, sun_ll, 3);
    save(config_cache_file, 'config');
end

fdf = @(rot) opt.crystal_system(rot, ray_in_ll, crystal, trace);

% Find seed rotation
cand_rot = opt.find_cand_rot(config, ray_out_ll, 'quat');
init_rot = ode.find_solution(fdf, cand_rot(1, :), [ray_out_ll, 1], 'eps', 1e-8);

% Find contour
[rot_contour, contour_status] = ode.find_contour(fdf, init_rot, 'h', 0.05);
assert(contour_status.closed && contour_status.completed);

rot_llr = geo.quat2llr(rot_contour);
w0 = 0.00568288482869920;
cmp0 = [0, 4.59841634682717e-05, 2.42406840554768e-05, 11.2879396732513, 0.186902454035421, 0.899153285889582;
    5.38757926364751, 3.66528523771771e-05, 2.42406840554768e-05, 11.2584715120718, 0.166484832344015, 0.806693950651438;
    10.2932168390482, 3.01882042252055e-05, 2.42406840554768e-05, 10.3352690659948, 0.160205805213223, 0.752129064884193;
    16.1730530052101, 2.63208299097885e-05, 2.42406840554768e-05, 9.41728822734543, 0.161715310518915, 0.712980588208198;
    23.5296857482992, 2.42170839525806e-05, 2.42406840554768e-05, 8.57759595610417, 0.170521376461546, 0.683018648465642;
    29.4185598705471, 2.39617902984188e-05, 2.42406840554768e-05, 8.25889269847758, 0.177080884223915, 0.675897572049612;
    36.4648561133044, 2.40034248354518e-05, 2.42406840554768e-05, 7.97471239956184, 0.184793076579854, 0.671935544039061;
    42.5730794166595, 2.22974626479927e-05, 2.42406840554768e-05, 7.95922333605700, 0.169777935613795, 0.680704519649992;
    48.5356499386647, 2.21406190013785e-05, 2.42406840554768e-05, 8.09929661330833, 0.161467684373260, 0.698412440010480;
    54.4184864751053, 2.35805012251220e-05, 2.42406840554768e-05, 8.42520190375844, 0.158711585293505, 0.727476911246956;
    60.3026000018353, 2.73669147574220e-05, 2.42406840554768e-05, 9.01320466756685, 0.162024645791401, 0.773073265409271;
    64.7140935624909, 3.23823238653023e-05, 2.42406840554768e-05, 9.64466320225604, 0.168880747051434, 0.820154992659938;
    70.5973796046417, 4.52837003810477e-05, 2.42406840554768e-05, 10.6974627111637, 0.191105728638028, 0.913781897026592;
    75.0110411626996, 5.22783767340478e-05, 2.42406840554768e-05, 10.7975693614211, 0.199096817403242, 1.00319856570929;
    80.8914902849777, 5.26791754890669e-05, 2.42406840554768e-05, 9.30558740614579, 0.209024818171957, 1.11725536998472;
    86.7762773169044, 5.09172059376703e-05, 2.42406840554768e-05, 7.71268443303333, 0.226720708299374, 1.20122106802789;
    92.4818520715323, 4.92802772125451e-05, 2.42406840554768e-05, 6.73101294426213, 0.241243215875548, 1.25196658036682;
    98.5372337693765, 5.13542062488991e-05, 2.42406840554768e-05, 6.26203810327661, 0.265506187342187, 1.27420937952127;
    104.426283989369, 5.27116796068648e-05, 2.42406840554768e-05, 5.86369136964888, 0.286540035751874, 1.29421243832191;
    111.781064841649, 4.88748710580629e-05, 2.42406840554768e-05, 5.83599396095778, 0.268855257068444, 1.28501260203523;
    117.662740332629, 4.60748353021989e-05, 2.42406840554768e-05, 5.88793141415653, 0.253825049302369, 1.27180842803730;
    123.545919945408, 4.41848522170706e-05, 2.42406840554768e-05, 6.20096287594638, 0.237270051389488, 1.23887212122625;
    129.429633365038, 4.37184367355317e-05, 2.42406840554768e-05, 6.78766693421980, 0.223563569766584, 1.18849728455005;
    135.312083662877, 4.40029390704054e-05, 2.42406840554768e-05, 7.78682695306593, 0.208555222224404, 1.11777713472622;
    141.009236526193, 4.64270610542323e-05, 2.42406840554768e-05, 9.36615556490668, 0.199574063287081, 1.02461534351051;
    145.607088028045, 4.74390552318527e-05, 2.42406840554768e-05, 10.8192914031186, 0.193544559323848, 0.934569007152742];

axis_pdf = generate_axis_pdf([0, 0, 0]);
[w, cmp] = opt.compute_contour_weight(rot_llr, axis_pdf, config);

assert(abs(w - w0) < 1e-8);
assert(norm(cmp(1:5:end, :) - cmp0) < 1e-8);
end

% ================================================================================
function axis_pdf = generate_axis_pdf(zenith_dist)
% INPUT
%   zenith_dist:        [type, mean, sigma], type: 0 - uniform, 1 - gaussian

if zenith_dist(1) == 1
    zenith_dist = zenith_dist(2:3);
    tmp_x = linspace(-90, 90, 50000);
    tmp_pdf = exp(- (90 - tmp_x - zenith_dist(1)).^2/2 / zenith_dist(2)^2) / zenith_dist(2);
    zen_total = (sum(tmp_pdf) * (tmp_x(2) - tmp_x(1)));
    axis_pdf = @(llr) (exp(- (90 - asind(sind(llr(:, 2))) - zenith_dist(1)).^2/2 / zenith_dist(2)^2) / ...
        zenith_dist(2) / zen_total) * (1/360) * (1/360);
elseif zenith_dist(1) == 0
    axis_pdf = @(llr) ones(size(llr, 1), 1) / (180 * 180 * 4 / pi);
else
    error('Distribution type error!');
end
end
